#!/usr/bin/env bash
# shellcheck disable=SC2001
set -euo pipefail

tmp=$(mktemp)
trap 'rm -rf "$tmp"' EXIT

gh pr list \
  --author 'renovate[bot]' \
  --base main \
  --state all \
  --limit 100 \
  --json title \
  --jq '.[] | .title' | while read -r title; do
    read -r dep < <(sed 's/^feat(\(.*\)): .*$/\1/' <<<"$title")
    read -r msg < <(sed 's/^feat(.*): \(.*\)$/\1/' <<<"$title")
    grep -Fwo "$dep" <<<"$msg" || true
  done |
  sort -u >"$tmp"

ret=0

for info in */info.yaml; do
  dep=$(dirname "$info")

  read -r override < <(yq '.overrides' "$dep"/info.yaml)

  if [[ "$override" != null ]]; then
    printf ' \e[1;36m·\e[0m \e[35m%s\e[0m is an override of \e[35m%s\e[0m\n' "$dep" "$override"
    continue
  fi

  if grep -Fxq "$dep" "$tmp"; then
    printf ' \e[32m✓\e[0m \e[35m%s\e[0m is updated by renovate\n' "$dep"
    continue
  fi

  if ! find "$dep" \
    -mindepth 1 \
    -maxdepth 1 \
    -type f \
    \( \
      -name Gemfile -o \
      -name requirements.txt -o \
      -name package.json \
    \) \
    -exec false {} +; then
    printf ' \e[1;33m⏲\e[0m \e[35m%s\e[0m is configured, but not yet updated by renovate\n' "$dep"
    continue
  fi

  if jq -r '.customManagers[] | .fileMatch[]' renovate.json | grep -Fxq "$dep/Dockerfile"; then
    printf ' \e[1;33m⏲\e[0m \e[35m%s\e[0m is configured, but not yet updated by renovate\n' "$dep"
    continue
  fi

  printf ' \e[31m✗\e[0m \e[35m%s\e[0m is \e[1mnot\e[0m renovate-maintained\n' "$dep" >&2
  ret=1
done

exit "$ret"
