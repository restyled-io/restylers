#!/usr/bin/env ruby
#
# Utilize the info.yaml test cases to make a directory of files that can be
# committed, pushed, and verified as correctly Restyled on production (along
# with configuration and support, so it works).
#
###
require "fileutils"
require "tmpdir"
require "yaml"

REPO = "git@github.com:restyled-io/demo"
BRANCH = "testing/all"
FILES = {}

def system_(*args)
  system(*args) or raise "system error: #{args.inspect}"
end

channel = ARGV.first || "dev"
local_manifest = "/tmp/restylers-#{channel}.yaml"
remote_manifest = "https://docs.restyled.io/data-files/restylers/manifests/#{channel}/restylers.yaml"
system(
  "curl", "--silent", "--fail", "--show-error",
  "--output", local_manifest, remote_manifest
)

restylers = YAML.load_file(local_manifest).map do |restyler|
  name = restyler.fetch("name")
  tests = YAML.
    load_file("restylers/#{name}/info.yaml").
    fetch("metadata", {}).
    fetch("tests", [])

  tests.each.with_index do |test, n|
    # N.B. if different cases need the same support file this won't work.
    # If/when that happens we can consider some kind of workaround.
    if support = test["support"]
      support_path = support.fetch("path")
      FILES[support_path] = support.fetch("contents")
    end

    ext = test["extension"] || "example"
    path = "#{name}/test-file-#{n}.#{ext}"
    contents = test.fetch("contents")

    # Can't commit CRLF, so skip that test case
    unless contents.include?("\r\n")
      FILES[path] = contents
    end
  end

  {
    name => {
      "enabled" => true,
      "include" => ["#{name}/**/*"]
    }
  }
end

FILES[".restyled.yaml"] = YAML.dump(restylers)

Dir.mktmpdir do |dir|
  system_("git", "clone", REPO, dir)

  Dir.chdir(dir) do
    system("git", "checkout", "--quiet", BRANCH) or
      system_("git", "checkout", "--quiet", "-b", BRANCH)

    # Clean directories, to be recreated
    FILES.keys.map { |p| File.dirname(p) }.uniq.each do |d|
      if d != '.'
        FileUtils.rm_rf d
      end
    end

    FILES.each do |path, contents|
      FileUtils.mkdir_p(File.dirname(path))
      File.write(path, contents)
    end

    system_("git", "add", ".")
    system_("git", "commit", "-m", "Update test case files")
    system_("git", "push")
  end
end
