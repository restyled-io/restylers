#!/usr/bin/env ruby
#
# Read */info.yaml, account for overrides, and provide access to the data
# contained therein.
#
###
require "yaml"

INFO = begin
  root = File.expand_path(File.join(File.dirname(__FILE__), ".."))
  glob = Dir.glob(File.join(root, "*", "info.yaml"))
  glob.sort.each_with_object({}) do |path, infos|
    info = YAML.load_file(path)
    merged =
      if parent = info["overrides"]
        parent_info = YAML.load_file(File.join(root, parent, "info.yaml"))
        parent_info.merge(info)
      else
        info
      end

    infos[merged.fetch("name")] = merged
  end
end

case ARGV.shift
when "names"
  INFO.keys.each(&method(:puts))

when "overrides"
  if name = ARGV.first
    puts INFO.fetch(name)["overrides"]
  else
    INFO.values.filter { |x| x.key?("overrides") }.each do |x|
      puts x.fetch("name")
    end
  end

when "get"
  name, key = ARGV.shift(2)
  value = INFO.fetch(name)

  key.split(".").each do |k|
    value = value.fetch(k)
  end

  rendered =
    case value
    when Hash then YAML.dump(value)
    when Array then YAML.dump(value)
    else value
    end

  puts rendered

when "dump"
  infos = INFO.values
  infos.each do |i|
    i.delete("overrides")
    i.delete("metadata")
  end
  puts YAML.dump(infos)

# TODO: move elsewhere, mustache?
when "wiki"
  INFO.each do |name, info|
    if info.fetch("enabled")
      puts "## #{name}"
    else
      puts "## #{name}\\*"
    end

    puts
    puts info.
      fetch("metadata").
      fetch("languages").
      map { |lang| lang.sub(/\*/, '\\*') }.
      join(", ")
    puts
    puts "```yaml"
    puts YAML.dump(
      "image" => info.fetch("image"),
      "command" => info.fetch("command"),
      "arguments" => info.fetch("arguments"),
      "include" => info.fetch("include"),
      "interpreters" => info.fetch("interpreters"),
    )
    puts "```"
    puts
    info.fetch("documentation").each do |url|
      puts "- #{url}"
    end
    puts
  end

  puts "\\**Must be explicitly enabled.*"
  puts
end
